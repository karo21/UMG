// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (http://www.specflow.org/).
//      SpecFlow Version:2.1.0.0
//      SpecFlow Generator Version:2.0.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace GRM.Specflow
{
    using TechTalk.SpecFlow;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class GRMPFeature : Xunit.IClassFixture<GRMPFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
#line 1 "GRM.SpecFlowFeature.feature"
#line hidden
        
        public GRMPFeature()
        {
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "GRMP", "\tA music label called Recklass Rekkids (aka RR) wants to build a Global Rights Ma" +
                    "nagement (aka GRM)\r\n\tplatform to allow them to best utilise their collection of " +
                    "music assets.", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void ScenarioTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioSetup(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioStart(scenarioInfo);
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 5
#line 6
testRunner.Given("Global Right Managment Platform", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Given ");
#line hidden
        }
        
        public virtual void SetFixture(GRMPFeature.FixtureData fixtureData)
        {
        }
        
        void System.IDisposable.Dispose()
        {
            this.ScenarioTearDown();
        }
        
        [Xunit.FactAttribute(DisplayName="Search for active music contracts")]
        [Xunit.TraitAttribute("FeatureTitle", "GRMP")]
        [Xunit.TraitAttribute("Description", "Search for active music contracts")]
        public virtual void SearchForActiveMusicContracts()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for active music contracts", ((string[])(null)));
#line 8
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 9
testRunner.When("user perform search by \'ITunes 03-01-2012\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "Usages",
                        "StartDate",
                        "EndDate"});
            table1.AddRow(new string[] {
                        "Monkey Claw",
                        "Black Mountain",
                        "digital download",
                        "02-01-2012",
                        ""});
            table1.AddRow(new string[] {
                        "Monkey Claw",
                        "Motor Mouth",
                        "digital download",
                        "03-01-2011",
                        ""});
            table1.AddRow(new string[] {
                        "Tinie Tempah",
                        "Frisky (Live from SoHo)",
                        "digital download",
                        "02-01-2012",
                        ""});
            table1.AddRow(new string[] {
                        "Tinie Tempah",
                        "Miami 2 Ibiza",
                        "digital download",
                        "02-01-2012",
                        ""});
#line 10
testRunner.Then("the output should be", ((string)(null)), table1, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Search for active music contracts_2")]
        [Xunit.TraitAttribute("FeatureTitle", "GRMP")]
        [Xunit.TraitAttribute("Description", "Search for active music contracts_2")]
        public virtual void SearchForActiveMusicContracts_2()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for active music contracts_2", ((string[])(null)));
#line 17
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 18
testRunner.When("user perform search by \'YouTube 12-27-2012\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "Usages",
                        "StartDate",
                        "EndDate"});
            table2.AddRow(new string[] {
                        "Monkey Claw",
                        "Christmas Special",
                        "streaming",
                        "12-25- 2012",
                        "12-31-2012"});
            table2.AddRow(new string[] {
                        "Monkey Claw",
                        "Iron Horse",
                        "streaming",
                        "06-01-2012",
                        ""});
            table2.AddRow(new string[] {
                        "Monkey Claw",
                        "Motor Mouth",
                        "streaming",
                        "03-01-2011",
                        ""});
            table2.AddRow(new string[] {
                        "Tinie Tempah",
                        "Frisky (Live from SoHo)",
                        "streaming",
                        "02-01-2012",
                        ""});
#line 19
testRunner.Then("the output should be", ((string)(null)), table2, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [Xunit.FactAttribute(DisplayName="Search for active music contracts_3")]
        [Xunit.TraitAttribute("FeatureTitle", "GRMP")]
        [Xunit.TraitAttribute("Description", "Search for active music contracts_3")]
        public virtual void SearchForActiveMusicContracts_3()
        {
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Search for active music contracts_3", ((string[])(null)));
#line 27
this.ScenarioSetup(scenarioInfo);
#line 5
this.FeatureBackground();
#line 28
testRunner.When("user perform search by \'YouTube 04-01-2012\'", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "When ");
#line hidden
            TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                        "Artist",
                        "Title",
                        "Usages",
                        "StartDate",
                        "EndDate"});
            table3.AddRow(new string[] {
                        "Monkey Claw",
                        "Motor Mouth",
                        "streaming",
                        "03-01- 2011",
                        ""});
            table3.AddRow(new string[] {
                        "Tinie Tempah",
                        "Frisky (Live from SoHo)",
                        "streaming",
                        "02-01-2012",
                        ""});
#line 29
testRunner.Then("the output should be", ((string)(null)), table3, "Then ");
#line hidden
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "2.1.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                GRMPFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                GRMPFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
